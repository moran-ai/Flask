会话机制
1.cookie方式：
    保存:
        通过response对象保存
        response = redirect(xxxx)
        response = render_template(xxxx)
        response = Response(xxx)
        response = make_response(xxx)
        response = jsonify(xxx)

        response.set_cookie(key. value, max_age)

    获取:
          通过请求对象获取
           request.cookies.get(key)

    删除:
        通过response对象删除,把浏览器中的key=value删除
        request.delete_cookie(key)

2.session方式
    在服务器端进行用户信息的保存
    注意：
        使用session, 必须设置配置文件，在配置文件中添加SECRET_KEY = 'XXXX',
        添加SECRET_KEY的目的是用于session_id的加密，如果不设置会报错

        设置：
            如果要使用session需要导入
            from flask import session
             把session当作字典使用，因此,session[key] = value
             就会将key=value保存到session的内存空间
             并在响应的时候自动在response中添加一个cookie: session加密后的id
             通过value = session.get(key) 或者 value = session[key] 获取session的值

        删除
            session.clear()  删除session的内存空间和cookie
            del session[key] 只会删除session中的键值对，不会删除session空间中的cookie


Secertid:1a37c08cce7197432a5a643b408527e1
Secertkey:28d9490953ccd619743f924f9f8e3861
bid: 1214cea0f4be4c48bb3d10e34553c3b9

1.短信的发送

2.登录权限验证
只要进入用户中心，判断用户是否是在登录状态，如果用户登录了，可以正常显示页面； 如果用户没有登录，则
自动跳转到登录页面进行登录，登录之后才可以进行后续操作。

钩子函数：
    直接应用在app上
    before_first_request
    before_request
    after_request
    teardown_request

    应用在蓝图上
    before_app_first_request
    before_app_request
    after_app_request
    teardown_app_request
